<div id = "codingPage">
    <div id = "welcomeMessage">
        <h1 class="text-center">Welcome to the Coding Exercises Page!</h1>
        <p>Please select a topic from below and an exercise related to that course will be generated. You can then press 'Start Timer' once you are ready to attempt the generated exercise. Press the submit button when you are done coding to check your answer and see the expected output.</p>
    </div>
    <div class="d-flex flex-wrap gap-3 my-4 align-items-center">
        <div class="type-buttons-box">
            <div class="type-buttons">
                <button class="btn btn-primary btn-lg px-5" id = "courseButtons" formmethod="get" formaction="/coding">1300</button>
                <button class="btn btn-primary btn-lg px-5" id = "courseButtons" formmethod="get" formaction="/coding">2270</button>
                <button class="btn btn-primary btn-lg px-5" id = "courseButtons" formmethod="get" formaction="/coding">2400</button>
                <button class="btn btn-primary btn-lg px-5" id = "courseButtons" formmethod="get" formaction="/coding">3104</button>
            </div>
            <div class = "timer-buttons">
                <button id = "timer" class="btn btn-outline-dark btn-lg px-5 py-2" type = "submit" onclick = "startCountdown()">Start Timer</button>
            </div>
        </div>
    </div>
        {{>passed}}
        {{>message}}
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="border rounded p-3 bg-white h-100" id = "description-box">
                <h5>Description</h5>
                <p class="text-break">{{ question_descript }}</p>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="border rounded p-3 h-100 bg-white" id = "solution-box">
                <h5>Solution</h5>
                <form method="post" action="/coding" id="codingExercise">
                    <input type="hidden" id="question_id" name="question_id" value="{{question_id}}">
                    <input type="hidden" name="time_taken" id="time_taken" value="0">
                    <textarea id="code" name="code" cols="75" rows="25">{{#if current_code}}{{current_code}}{{else}}{{starter_code}}{{/if}}</textarea>
                    <input type="submit" id="submit-button" name="submit-button" onclick="beforeSubmit()" value="Submit" class="btn btn-primary">
                </form>
            </div>
        </div>
    </div>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
    const codeEditor = document.getElementById('code');
    const questionId = document.getElementById('question_id').value;
    const saveStatus = document.createElement('div');
    
    // Save status indicator
    saveStatus.style.position = 'fixed';
    saveStatus.style.bottom = '10px';
    saveStatus.style.right = '10px';
    saveStatus.style.padding = '5px 10px';
    saveStatus.style.background = '#f8f9fa';
    saveStatus.style.borderRadius = '4px';
    saveStatus.style.display = 'none';
    document.body.appendChild(saveStatus);

    let lastSavedValue = codeEditor.value;
    let isSaving = false;

    function showStatus(message, isError = false) {
        saveStatus.textContent = message;
        saveStatus.style.color = isError ? 'red' : 'green';
        saveStatus.style.display = 'block';
        setTimeout(() => saveStatus.style.display = 'none', 2000);
    }

    async function saveDraft(autosaved) {
        if (isSaving || codeEditor.value === lastSavedValue) return;
        
        isSaving = true;
        try {
        const response = await fetch('/save-draft', {
            method: 'POST',
            body: JSON.stringify({
            code: codeEditor.value,
            question_id: questionId
            }),
            headers: {'Content-Type': 'application/json'}
        });

        if (response.ok) {
            lastSavedValue = codeEditor.value;
            if (autosaved) {
                showStatus('Auto-saved Successfully');
            } else {
                showStatus('Saved Successfully');
            }
        } else {
            if (autosaved) {
                showStatus('Auto-save Failed', true);
            } else {
                showStatus('Save Failed', true);
            }
        }
        } catch (error) {
            console.error('Auto-save error:', error);
            if (autosaved) {
                showStatus('Auto-save Error', true);
            } else {
                showStatus('Save Error', true);
            }
        } finally {
            isSaving = false;
        }
    }

    // Auto-save every 10 seconds
    const autoSaveInterval = setInterval(() => saveDraft(true), 10000);

    // Save immediately when leaving the page
    window.addEventListener('beforeunload', () => {
        if (codeEditor.value !== lastSavedValue) {
        // Synchronous request for reliable final save
        const xhr = new XMLHttpRequest();
        xhr.open('POST', '/save-draft', false);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(JSON.stringify({
            code: codeEditor.value,
            question_id: questionId
        }));
        }
        clearInterval(autoSaveInterval);
    });

    // Optional: Save on Ctrl+S or Cmd+S
    document.addEventListener('keydown', (e) => {
        if ((e.ctrlKey || e.metaKey) && e.key === 's') {
        e.preventDefault();
        saveDraft(false);
        }
    });
    });
    </script>
</div>

<script src = "../../resources/js/codingPage.js"></script>